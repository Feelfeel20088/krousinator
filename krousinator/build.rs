use std::{fs, io::Write};

struct ImageArrayBuilder {
    final_string: String,
}

impl ImageArrayBuilder {
    fn new() -> Self {
        Self {
            final_string:
                "// This file is autogenerated by build.rs\npub static IMAGES: &[&[u8]] = &["
                    .to_string(),
        }
    }

    fn add_image(&mut self, path: String) {
        self.final_string += &path;
    }
    fn build(&mut self) {
        self.final_string.push_str("\n];");
    }

    pub fn into_vec(self) -> Vec<u8> {
        self.final_string.into_bytes()
    }
}

impl From<ImageArrayBuilder> for String {
    fn from(builder: ImageArrayBuilder) -> Self {
        builder.final_string
    }
}

const FILE: &str = "generated.rs";

fn main() {
    let paths = fs::read_dir("../images").unwrap();

    let mut builder = ImageArrayBuilder::new();

    for p in paths {
        let path = match p {
            Ok(p) => p.path(),
            Err(e) => {
                println!("Could not get PathBuf from path: {}", e);
                return;
            }
        };

        if !path.is_file() {
            println!("Non file detected in {}!", path.to_str().unwrap());
            continue;
        }
        // relative to where generated.rs is
        builder.add_image(format!("{}{}", "../../", path.to_str().unwrap()));
    }

    builder.build();

    let mut file = match fs::File::create(format!("../src/{}", FILE)) {
        Ok(f) => f,
        Err(e) => {
            println!("Failed to create/rewrite file generated.rs: {}", e);
            return;
        }
    };

    match file.write_all(&builder.into_vec()) {
        Ok(_) => println!("{}", format!("Wrote into file {}", FILE)),
        Err(_) => println!("{}", format!("Failed to write into file {}", FILE)),
    }
}
